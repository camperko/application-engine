<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../petriflow_schema.xsd">
	<id>org_group</id>
	<version>1.0.0</version>
	<initials>GRP</initials>
	<title>Organization group</title>
	<icon>home</icon>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<!-- PROCESS ROLE REFS -->
	<!-- PROCESS USER REFS -->
	<!-- DATA -->
	<data type="text">
		<id>group_id</id>
		<title>Group ID</title>
		<placeholder>Enter group ID</placeholder>
		<desc>ID of organization group</desc>
		<action trigger="get">
			id: f.group_id;
			change id value { useCase.stringId }
		</action>
	</data>
	<data type="user">
		<id>author</id>
		<title>Group Author</title>
	</data>
	<data type="text">
		<id>group_name</id>
		<title>Group name</title>
		<placeholder>Enter group name</placeholder>
		<desc>Name of organization group</desc>
		<action trigger="set">
			name: f.group_name;
			useCase.setTitle(name.value)
			workflowService.save(useCase)
		</action>
	</data>
	<data type="user">
		<id>user_selection</id>
		<title>Select user</title>
		<placeholder>No user selected</placeholder>
		<desc>Select user to be added as a group member</desc>
		<action trigger="get">
			userField: f.user_selection;
			change userField value { null }
		</action>
		<action trigger="set">
			selection: f.members,
			userField: f.user_selection;
			change selection options {  nextGroupService.addUser(userField.value, selection.options) }
		</action>
	</data>
	<data type="multichoice_map">
		<id>members</id>
		<title>Members</title>
		<desc>Members of current organization group</desc>
		<view>
			<list/>
		</view>
	</data>
	<data type="enumeration_map">
		<id>user_action_selection</id>
		<title name="user_action_selection">Select action</title>
		<options>
			<option key="add" name="user_action_selection_add">Add existing user</option>
			<option key="invite" name="user_action_selection_invite">Invite new user</option>
		</options>
		<init>add</init>
		<action trigger="set">
			action_selection: f.user_action_selection,
			user_selection: f.user_selection,
			invite_by_mail: f.invite_by_mail,
			trans: t.8;

			make user_selection, editable on trans when { action_selection.value == "add" }
			make invite_by_mail, hidden on trans when { action_selection.value == "add" }

			make user_selection, hidden on trans when { action_selection.value == "invite" }
			make invite_by_mail, editable on trans when { action_selection.value == "invite" }
		</action>
	</data>
	<data type="text">
		<id>invite_by_mail</id>
		<title name="invite_by_mail">Add e-mail address</title>
		<placeholder>example@example.com</placeholder>
		<desc name="invite_by_mail_desc">Add e-meail address to send invitation</desc>
		<valid>email</valid>
	</data>
	<data type="taskRef">
		<id>filter_tasks</id>
		<title></title>
	</data>
	<data type="taskRef">
		<id>filter_preview</id>
		<title></title>
	</data>
	<data type="taskRef">
		<id>imported_menu_ids</id>
		<title></title>
	</data>
	imported_menu_ids
	<data type="enumeration_map">
		<id>filter_autocomplete_selection</id>
		<title name="select_menu_item_filter">Select filter</title>
		<component>
			<name>autocomplete_dynamic</name>
		</component>
		<action trigger="set">
			filterAutocomplete: f.this,
			previewTaskRef: f.filter_preview,
			referencedFiltersList: f.referenced_filters;

			if (filterAutocomplete.getOptions().containsKey(filterAutocomplete.value)) {
				change previewTaskRef value {
					return [findTask({it.caseId.eq(filterAutocomplete.value).and(it.transitionId.eq("view_filter"))}).stringId]
				}
			} else {
				change filterAutocomplete options {
					return findFilters(filterAutocomplete.value)
						.findAll({filterCase -&gt; !referencedFiltersList.value.contains(filterCase.stringId)})
						.collectEntries({filterCase -&gt; [filterCase.stringId, filterCase.title]})
				}
				change previewTaskRef value {
					return []
				}
			}
		</action>
	</data>
	<data type="button">
		<id>add_filter_to_menu</id>
		<title></title>
		<placeholder name="add_menu_item">Add to menu</placeholder>
		<action trigger="set">
			filterAutocomplete: f.filter_autocomplete_selection,
			menuItemsTaskRef: f.filter_tasks,
			referencedFiltersList: f.referenced_filters;

			if (!filterAutocomplete.getOptions().containsKey(filterAutocomplete.value)) {
				return;
			}

			def optionCase = createCase("preference_filter_item")
			def initTask = findTask({it.transitionId.eq("init").and(it.caseId.eq(optionCase.stringId))})
			assignTask(initTask)
			setData(initTask, [
				"filter_case": ["type":"caseRef", "value": [filterAutocomplete.value], "allowedNets":["filter"]],
				"parentId": ["type":"text", "value":useCase.stringId]
			])
			finishTask(initTask)

			change referencedFiltersList value {return referencedFiltersList.value + filterAutocomplete.value}

			def viewTask = findTask({it.transitionId.eq("view").and(it.caseId.eq(optionCase.stringId))})

			change menuItemsTaskRef value {return menuItemsTaskRef.value + viewTask.stringId}
			change filterAutocomplete value {return ""}
		</action>
	</data>
	<data type="file">
		<id>export_menu_file</id>
		<title name="export_file">Exported menu</title>
		<placeholder name="export_file_placeholder">Exported menu file</placeholder>
		<desc name="export_file_desc">Download exported menu file in xml format</desc>
	</data>
	<data type="text">
		<id>export_menu_id</id>
		<title name="exported_menu_id">Exported menu identifier</title>
		<desc name="exported_menu_id_desc">Create unique name for current menu configuration.</desc>
	</data>
	<data type="text">
		<id>import_results</id>
		<title name="import_results">Import results</title>
		<values>area</values>
	</data>
	<data type="button">
		<id>export_menu_btn</id>
		<title></title>
		<placeholder name="export_menu_btn_placeholder">Export menu</placeholder>
		<desc name="export_menu_btn_desc">Export configured menu into downloadable xml file</desc>
		<action trigger="set">
			export_file: f.export_menu_file,
			menuIdentifier: f.export_menu_id,
			groupId: f.group_id;

<!--			List &lt;com.netgrif.workflow.workflow.domain.Case&gt; cases = findCases( { it.processIdentifier.eq("preference_filter_item") &amp;&amp; it.dataSet["parentId"].value.eq(new org.bson.types.ObjectId(groupId.value)) } ); -->
			def cases = findCases( { it.processIdentifier.eq("preference_filter_item")}).findAll { it.dataSet["parentId"].value == useCase.stringId }
			change export_file value { menuImportExport.exportMenu(cases, menuIdentifier.value, groupId.value, export_file) }
		</action>
		<component>
			<name>raised</name>
		</component>
	</data>
	<data type="file">
		<id>import_menu_file</id>
		<title>Import menu</title>
		<placeholder name="import_file_placeholder">Menu file to import</placeholder>
		<desc name="import_file_desc">Upload XML file containing menu here</desc>
	</data>
	<data type="button">
		<id>import_menu_btn</id>
		<title></title>
		<placeholder name="import_menu_btn_placeholder">Import menu</placeholder>
		<desc name="import_menu_btn_desc">Import menu from provided xml file</desc>
		<action trigger="set">
			import_file: f.import_menu_file,
			menuItemsTaskRef: f.filter_tasks,
			referencedFiltersList: f.referenced_filters,
			groupId: f.group_id,
			newEntries: f.imported_menu_ids,
			importResults: f.import_results;

			change importResults value {return ""}

			def cases = findCases({ it.processIdentifier.eq("preference_filter_item")}).findAll { it.dataSet["parentId"].value == useCase.stringId }
			change newEntries value { menuImportExport.importMenu(cases, import_file.value, useCase.stringId) }
			log.info("DEBUG: newEntries: " + newEntries.value)
		</action>
		<action trigger="set">
			import_file: f.import_menu_file,
			menuItemsTaskRef: f.filter_tasks,
			referencedFiltersList: f.referenced_filters,
			groupId: f.group_id,
			newEntries: f.imported_menu_ids,
			importResults: f.import_results;

			filterTaskIds = []
			filterCaseIds = []

			newEntries.value.forEach { itemId -&gt;
				log.info("DEBUG: foreach ok")
				def idSplit = itemId.split(',')

				def initTask = findTask({it.transitionId.eq("init").and(it.caseId.eq(idSplit[0]))})
				setData(initTask, [
				"filter_case": ["type":"caseRef", "value": [idSplit[1]], "allowedNets":["filter"]]
				])
				finishTask(initTask)

				def viewTask = findTask({it.transitionId.eq("view").and(it.caseId.eq(idSplit[0]))})

				filterTaskIds.add(viewTask.getStringId())
				filterCaseIds.add(idSplit[1])
				//TODO vracat case ID novych PFI v split 0 a setData na ich filterCase field podla split 1
				//TODO skontrolovat finish init tasku
				log.info("DEBUG: split add ok")
			}

			change menuItemsTaskRef value {return filterTaskIds}
			change referencedFiltersList value {return filterCaseIds}
			log.info("DEBUG: new items add ok")

			<!--
            change menuItemsTaskRef value {return menuItemsTaskRef.value + idSplit[0]}
            change referencedFiltersList value {return referencedFiltersList.value + idSplit[1]}
        }
        change menuItemsTaskRef value {return menuItemsTaskRef.value + viewTask.stringId}-->
		</action>
		<component>
			<name>raised</name>
		</component>
	</data>
	<data type="caseRef">
		<id>referenced_filters</id>
		<title></title>
		<allowedNets>
			<allowedNet>filter</allowedNet>
		</allowedNets>
	</data>
	<!-- I18NS -->
	<i18n locale="sk">
		<i18nString name="author">Autor grupy</i18nString>
		<i18nString name="group_id">ID grupy</i18nString>
		<i18nString name="group_id_desc">ID organizačnej grupy</i18nString>
		<i18nString name="group_id_placeh">Zadajte ID grupy</i18nString>
		<i18nString name="group_name">Názov grupy</i18nString>
		<i18nString name="group_name_desc">Názov organizačnej grupy</i18nString>
		<i18nString name="group_name_placeh">Zadajte názov grupy</i18nString>
		<i18nString name="user_selection">Vyberte nového používateľa</i18nString>
		<i18nString name="user_selection_desc">Vyberte nového používateľa pre pridanie do grupy</i18nString>
		<i18nString name="user_selection_placeh">Nebol vybraný žiadny používateľ</i18nString>
		<i18nString name="members">Členovia grupy</i18nString>
		<i18nString name="members_desc">Členovia organizačnej grupy</i18nString>
		<i18nString name="user_action_selection">Vyberte akciu</i18nString>
		<i18nString name="user_action_selection_add">Pridať existujúceho používateľa</i18nString>
		<i18nString name="user_action_selection_invite">Pozvať nového používateľa</i18nString>
		<i18nString name="invite_by_mail">Zadaj e-mail adresu</i18nString>
		<i18nString name="invite_by_mail_desc">Zadaj e-mail adresu</i18nString>
		<i18nString name="select_menu_item_filter">Zvoľte filter</i18nString>
		<i18nString name="add_menu_item">Pridať ako položku menu</i18nString>
		<i18nString name="menu_configuration">Konfigurácia menu</i18nString>
	</i18n>
	<i18n locale="de">
		<i18nString name="select_menu_item_filter">Filter auswählen</i18nString>
		<i18nString name="add_menu_item">Als Menüpunkt hinzufügen</i18nString>
		<i18nString name="menu_configuration">Menükonfiguration</i18nString>
	</i18n>
	<!-- TRANSITIONS -->
	<transition>
		<id>2</id>
		<x>220</x>
		<y>220</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Initialize group</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>group_id</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>author</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>group_name</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>1</id>
			<actions phase="pre">
				<action>
					filtersTaskRef: f.filter_tasks,
					referencedFiltersList: f.referenced_filters;

                    defaultFilters = findCases({it.processIdentifier.eq("filter").and(it.author.id.eq(userService.getSystem().id))})

					filterTaskIds = []
					filterCaseIds = []

					defaultFilters.forEach { filterCase -&gt;
						def optionCase = createCase("preference_filter_item")

						def initTask = findTask({it.transitionId.eq("init").and(it.caseId.eq(optionCase.stringId))})
						assignTask(initTask)
						setData(initTask, [
								"filter_case": ["type":"caseRef", "value": [filterCase.stringId], "allowedNets":["filter"]],
								"parentId": ["type":"text", "value":useCase.stringId], "menu_identifier": ["type":"text", value:"defaultMenu"]
						])
						finishTask(initTask)

						def viewTask = findTask({it.transitionId.eq("view").and(it.caseId.eq(optionCase.stringId))})
						filterTaskIds.add(viewTask.stringId)
						filterCaseIds.add(filterCase.stringId)
					}

					change filtersTaskRef value {return filterTaskIds}
					change referencedFiltersList value {return filterCaseIds}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>6</id>
		<x>740</x>
		<y>100</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Group info</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>group_id</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>author</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>group_name</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>members</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>3</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>8</id>
		<x>500</x>
		<y>340</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Add user</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>user_action_selection</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>2</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>user_selection</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>invite_by_mail</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>3</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>members</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>4</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>invite_new_user</id>
			<actions phase="pre">
				<action>
					action_selection: f.user_action_selection,
					invite_by_mail: f.invite_by_mail,
					members: f.members;

					if(action_selection.value == "invite" &amp;&amp; invite_by_mail.value != null){
						change members options { nextGroupService.inviteUser(invite_by_mail.value, members.options, useCase) }
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>25</id>
		<x>740</x>
		<y>340</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Edit group info</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>group_id</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>author</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>group_name</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>28</id>
		<x>500</x>
		<y>100</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Remove user</label>
		<assignPolicy>auto</assignPolicy>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>members</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>6</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>remove_user</id>
			<actions phase="pre">
				<action>
					members: f.members;
					change members options { nextGroupService.removeUser(members.value, members.options, useCase) }
					change members value { [] }
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>navigationMenuConfig</id>
		<x>380</x>
		<y>100</y>
		<layout>
			<cols>5</cols>
			<offset>0</offset>
		</layout>
		<label name="menu_configuration">Configure menu</label>
		<dataGroup>
			<id>dg0</id>
			<layout>grid</layout>
			<dataRef>
				<id>filter_autocomplete_selection</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>add_filter_to_menu</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>4</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>export_menu_id</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>export_menu_file</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>1</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>export_menu_btn</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>1</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>import_menu_file</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>import_menu_btn</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>import_results</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>4</x>
					<y>2</y>
					<rows>2</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>dg1</id>
			<layout>grid</layout>
			<dataRef>
				<id>filter_preview</id>
				<logic>
					<behavior>visible</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<dataGroup>
			<id>DataGroup_0</id>
			<layout>grid</layout>
			<dataRef>
				<id>filter_tasks</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<!-- PLACES -->
	<place>
		<id>1</id>
		<x>100</x>
		<y>220</y>
		<label>#init</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>4</id>
		<x>620</x>
		<y>220</y>
		<label>Group created</label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p1</id>
		<x>300</x>
		<y>100</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>3</id>
		<type>regular</type>
		<sourceId>1</sourceId>
		<destinationId>2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>5</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>18</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>21</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>22</id>
		<type>regular</type>
		<sourceId>8</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>26</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>25</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>27</id>
		<type>regular</type>
		<sourceId>25</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>29</id>
		<type>regular</type>
		<sourceId>28</sourceId>
		<destinationId>4</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>30</id>
		<type>regular</type>
		<sourceId>4</sourceId>
		<destinationId>28</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a3</id>
		<type>regular</type>
		<sourceId>2</sourceId>
		<destinationId>p1</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a5</id>
		<type>read</type>
		<sourceId>p1</sourceId>
		<destinationId>navigationMenuConfig</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>