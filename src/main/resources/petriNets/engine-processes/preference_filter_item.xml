<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../petriflow_schema.xsd">
	<id>preference_filter_item</id>
	<initials>PFI</initials>
	<title>Preference filter item</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<!-- PROCESS ROLE REFS -->
	<!-- PROCESS USER REFS -->
	<!-- DATA -->
	<data type="text" immediate="true">
		<id>entry_name</id>
		<title>Text</title>
	</data>
	<data type="text">
		<id>entry_marker</id>
		<title></title>
	</data>
	<data type="button">
		<id>button_0</id>
		<title></title>
		<placeholder>Up</placeholder>
		<action trigger="set">
			parentId: f.parentId;

			if (!task.isPresent()) {
				return;
			}

			parentCase = findCase({it._id.eq(new org.bson.types.ObjectId(parentId.value))});

			previousTaskRefValue = parentCase.dataSet.get("filter_tasks").value

			currentIndex = previousTaskRefValue.findIndexOf({ id -> id == task.get().stringId})

			if (currentIndex != 0) {
				previousTaskRefValue.remove(currentIndex)
				previousTaskRefValue.add(currentIndex - 1, task.get().stringId)

				parentTask = findTask({it.caseId.eq(parentId.value).and(it.transitionId.eq("navigationMenuConfig"))})

				setDataWithPropagation(parentTask, [
					"filter_tasks": ["type": "taskRef", "value": previousTaskRefValue]
				])
			}
		</action>
	</data>
	<data type="button">
		<id>button_1</id>
		<title></title>
		<placeholder>Down</placeholder>
		<action trigger="set">
			parentId: f.parentId;

			if (!task.isPresent()) {
				return;
			}

			parentCase = findCase({it._id.eq(new org.bson.types.ObjectId(parentId.value))});

			previousTaskRefValue = parentCase.dataSet.get("filter_tasks").value

			currentIndex = previousTaskRefValue.findIndexOf({ id -> id == task.get().stringId})

			if (currentIndex != previousTaskRefValue.size() - 1) {
				previousTaskRefValue.remove(currentIndex)
				previousTaskRefValue.add(currentIndex + 1, task.get().stringId)

				parentTask = findTask({it.caseId.eq(parentId.value).and(it.transitionId.eq("navigationMenuConfig"))})

				setDataWithPropagation(parentTask, [
					"filter_tasks": ["type": "taskRef", "value": previousTaskRefValue]
				])
			}
		</action>
	</data>
	<data type="button">
		<id>button_2</id>
		<title></title>
		<placeholder>Remove</placeholder>
		<action trigger="set">
			parentId: f.parentId;

			if (!task.isPresent()) {
				return;
			}

			parentCase = findCase({it._id.eq(new org.bson.types.ObjectId(parentId.value))});

			previousTaskRefValue = parentCase.dataSet.get("filter_tasks").value

			currentIndex = previousTaskRefValue.findIndexOf({ id -> id == task.get().stringId})

			previousTaskRefValue.remove(currentIndex)

			parentTask = findTask({it.caseId.eq(parentId.value).and(it.transitionId.eq("navigationMenuConfig"))})

			setDataWithPropagation(parentTask, [
				"filter_tasks": ["type": "taskRef", "value": previousTaskRefValue]
			])

			async.run {
				workflowService.deleteCase(useCase.stringId)
			}
		</action>
	</data>
	<data type="taskRef">
		<id>taskRef_0</id>
		<title></title>
	</data>
	<data type="caseRef">
		<id>filter_case</id>
		<title></title>
		<allowedNets>
			<allowedNet>filter</allowedNet>
		</allowedNets>
	</data>
	<data type="text">
		<id>parentId</id>
		<title></title>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>init</id>
		<x>420</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label></label>
		<dataRef>
			<id>filter_case</id>
			<logic>
				<behavior>forbidden</behavior>
			</logic>
			<layout>
				<x>1</x>
				<y>0</y>
				<rows>1</rows>
				<cols>2</cols>
				<template>netgrif</template>
			</layout>
			<logic>
				<action trigger="set">
					filterTaskRef: f.taskRef_0,
					filterCaseRef: f.filter_case,
					entryName: f.entry_name;

					filterCase = findCase({it._id.eq(filterCaseRef.value[0])})

					change entryName value {return filterCase.title}

					change filterTaskRef value {return [findTask({it.caseId.eq(filterCase.stringId).and(it.transitionId.eq("view_filter"))}).stringId]}
				</action>
			</logic>
		</dataRef>
		<dataRef>
			<id>parentId</id>
			<logic>
				<behavior>editable</behavior>
			</logic>
		</dataRef>
	</transition>
	<transition>
		<id>view</id>
		<x>660</x>
		<y>260</y>
		<layout>
			<offset>0</offset>
			<cols>5</cols>
		</layout>
		<label></label>
		<dataGroup>
			<id>DataGroup_0</id>
			<title></title>
			<layout>grid</layout>
			<dataRef>
				<id>entry_name</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>button_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>fill</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>button_1</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
			</dataRef>
			<dataRef>
				<id>button_2</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>4</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
				</layout>
			</dataRef>
			<dataRef>
				<id>taskRef_0</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>5</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>entry_marker</id>
				<logic>
					<behavior>hidden</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<!-- PLACES -->
	<place>
		<id>p1</id>
		<x>300</x>
		<y>260</y>
		<label></label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<place>
		<id>p2</id>
		<x>540</x>
		<y>260</y>
		<label></label>
		<tokens>0</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>a4</id>
		<type>regular</type>
		<sourceId>p1</sourceId>
		<destinationId>init</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a5</id>
		<type>regular</type>
		<sourceId>init</sourceId>
		<destinationId>p2</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>a6</id>
		<type>read</type>
		<sourceId>p2</sourceId>
		<destinationId>view</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>
