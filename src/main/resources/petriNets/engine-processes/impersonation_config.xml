<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://petriflow.com/petriflow.schema.xsd">
	<id>impersonation_config</id>
	<version>1.0.0</version>
	<initials>IPC</initials>
	<title>Konfigurácia zastupiteľov</title>
	<icon>home</icon>
	<defaultRole>false</defaultRole>
	<anonymousRole>false</anonymousRole>
	<transitionRole>false</transitionRole>
	<roleRef>
		<id>admin_imp</id>
		<caseLogic>
			<create>true</create>
			<delete>true</delete>
			<view>true</view>
		</caseLogic>
	</roleRef>
	<roleRef>
		<id>user_imp</id>
		<caseLogic>
			<create>true</create>
			<view>true</view>
		</caseLogic>
	</roleRef>
	<userRef>
		<id>config_owner</id>
		<caseLogic>
			<delete>true</delete>
			<view>true</view>
		</caseLogic>
	</userRef>
	<caseEvents>
		<event type="create">
			<id>assign_email</id>
			<actions phase="post">
				<action id="action_0">
					impersonated_email: f.impersonated_email,
                    impersonated: f.impersonated,
                    config_owner: f.config_owner;

					def user = userService.findByEmail(useCase.author.email, false)
                    change impersonated value { new com.netgrif.application.engine.petrinet.domain.dataset.UserFieldValue(user.id, user.name, user.surname, user.email) }
                    change impersonated_email value { useCase.author.email }
                    change config_owner value { [useCase.author.id] }
				</action>
			</actions>
		</event>
	</caseEvents>
	<role>
		<id>admin_imp</id>
		<title>Admin</title>
	</role>
	<role>
		<id>user_imp</id>
		<title>Používateľ</title>
	</role>
	<data type="text" immediate="true">
		<id>impersonated_email</id>
		<title>E-mail zastúpeného</title>
		<event type="set">
			<id>impersonated_email_set</id>
		</event>
	</data>
	<data type="multichoice_map" immediate="true">
		<id>impersonators</id>
		<title>Nastavení zastupitelia</title>
		<event type="set">
			<id>make_select_impersonator_null</id>
		</event>
	</data>
	<data type="userList">
		<id>config_owner</id>
		<title/>
	</data>
	<data type="dateTime" immediate="true">
		<id>valid_from</id>
		<title>Platnosť od</title>
	</data>
	<data type="dateTime" immediate="true">
		<id>valid_to</id>
		<title>Platnosť do</title>
	</data>
	<data type="user">
		<id>impersonated</id>
		<title>Používateľ na zastúpenie</title>
		<event type="set">
			<id>impersonated_set</id>
			<actions phase="post">
				<action id="action_1">
					impersonated_email: f.impersonated_email,
                    impersonated: f.impersonated;

                    change impersonated_email value { impersonated.value.email }</action>
			</actions>
		</event>
	</data>
	<data type="enumeration_map">
		<id>select_impersonator</id>
		<title>Výber zastupiteľa</title>
		<event type="get">
			<id>select_impersonator_get</id>

			<actions phase="post">
				<action>
					select_impersonator: f.select_impersonator;

					def selectableUsers = userService.findAllCoMembers(userService.loggedUser.transformToLoggedUser(), false, new com.netgrif.application.engine.utils.FullPageRequest()).content
					change select_impersonator value { null }
					change select_impersonator options { selectableUsers.collectEntries { [(it.id): ("$it.fullName ($it.email)" as String)] } }
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>remove_impersonator</id>
		<title/>
		<placeholder>Vymazať označených</placeholder>
		<event type="set">
			<id>remove_impersonator_set</id>
			<actions phase="pre">
				<action id="action_2">
					impersonators: f.impersonators;

                    if (impersonators.value != null &amp;&amp; impersonators.options != null) {
						def options = impersonators.options
						def values = impersonators.value
						values.each { it -&gt; options.remove(it) }
						change impersonators value { null }
						change impersonators options { options }
                    }
				</action>
			</actions>
		</event>
	</data>
	<data type="button">
		<id>add_selected</id>
		<title/>
		<placeholder>Pridať vybraného</placeholder>
		<event type="set">
			<id>add_selected_set</id>
			<actions phase="pre">
				<action id="10">
					select_impersonator: f.select_impersonator,
                    impersonators: f.impersonators;

					if (select_impersonator.value != null) {
						def options = impersonators.options != null ? impersonators.options : [:] as java.util.Map
						options.put(select_impersonator.value, select_impersonator.options[select_impersonator.value])
						options = options.sort { it.value }
						change impersonators options { options }
						change impersonators value { options.keySet() }
                    }
                    change select_impersonator value { null }
				</action>
			</actions>
		</event>
	</data>
	<data type="multichoice_map">
		<id>impersonated_authorities</id>
		<title>Zastúpené autority</title>

		<event type="get">
			<id>impersonated_authorities_get</id>

			<actions phase="post">
				<action>
					impersonated: f.impersonated,
					impersonated_authorities: f.impersonated_authorities;

					def impersonatedUser = userService.findById(impersonated.value.id, false)
					change impersonated_authorities options {
						impersonatedUser.authorities.collectEntries { [(it.stringId): (it.name)] }
					}
				</action>
			</actions>
		</event>
	</data>
	<data type="multichoice_map">
		<id>impersonated_roles</id>
		<title>Zastúpené procesné roly</title>

		<event type="get">
			<id>impersonated_roles</id>

			<actions phase="post">
				<action>
					impersonated: f.impersonated,
					impersonated_roles: f.impersonated_roles;

					def impersonatedUser = userService.findById(impersonated.value.id, false)
					change impersonated_roles options {
						return impersonatedUser.processRoles.findAll { it.netId }.sort { it.netId }.collectEntries {
							def net = petriNetService.get(new org.bson.types.ObjectId(it.netId))
							return [(it.stringId): ("$it.name ($net.title $net.identifier-$net.version)" as String)]
						}
					}
				</action>
			</actions>
		</event>
	</data>
	<transition>
		<id>t2</id>
		<x>500</x>
		<y>180</y>
		<label>Výber zastupiteľov</label>
		<roleRef>
			<id>admin_imp</id>
			<logic>
				<view>true</view>
				<cancel>true</cancel>
				<assign>true</assign>
				<delegate>true</delegate>
				<perform>true</perform>
			</logic>
		</roleRef>
		<userRef>
			<id>config_owner</id>
			<logic>
				<view>true</view>
				<cancel>true</cancel>
				<assign>true</assign>
				<delegate>true</delegate>
				<perform>true</perform>
			</logic>
		</userRef>
		<dataGroup>
			<id>t2_0</id>
			<cols>4</cols>
			<layout>grid</layout>
			<dataRef>
				<id>impersonators</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>valid_from</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>3</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>valid_to</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>3</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>select_impersonator</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>remove_impersonator</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>1</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
				<component>
					<name>stroked</name>
				</component>
			</dataRef>
			<dataRef>
				<id>add_selected</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>0</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
				<component>
					<name>stroked</name>
				</component>
			</dataRef>
			<dataRef>
				<id>impersonated_authorities</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>2</x>
					<y>2</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
				<component>
					<name>list</name>
				</component>
			</dataRef>
			<dataRef>
				<id>impersonated_roles</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>2</y>
					<rows>1</rows>
					<cols>2</cols>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
				<component>
					<name>list</name>
				</component>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>t2_assign</id>
		</event>
		<event type="finish">
			<id>t2_finish</id>
		</event>
		<event type="cancel">
			<id>t2_cancel</id>
		</event>
		<event type="delegate">
			<id>t2_delegate</id>
		</event>
	</transition>
</document>