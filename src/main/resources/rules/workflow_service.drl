import com.netgrif.workflow.auth.service.interfaces.IUserService;
import com.netgrif.workflow.elastic.service.interfaces.IElasticCaseService;
import com.netgrif.workflow.elastic.service.interfaces.IElasticTaskService;
import com.netgrif.workflow.mail.IMailService;
import com.netgrif.workflow.workflow.service.interfaces.IDataService;
import com.netgrif.workflow.workflow.service.interfaces.ITaskService;
import com.netgrif.workflow.workflow.service.interfaces.IWorkflowService;
import java.util.HashMap;
import java.util.ArrayList;
import org.slf4j.Logger;
import java.time.LocalDate;
import java.time.LocalDateTime;
import com.netgrif.workflow.utils.DateUtils;
import com.netgrif.workflow.rules.domain.facts.RuleEvaluation;
import java.util.concurrent.atomic.AtomicInteger

import com.netgrif.workflow.workflow.domain.Case

dialect "mvel"

global IWorkflowService workflowService;
global ITaskService taskService;
global IElasticCaseService elasticCaseService;
global IElasticTaskService elasticTaskService;
global IDataService dataService;
global IMailService mailService;
global IUserService userService;
global Logger log;

rule "case save rule"
when
    $case:Case( processIdentifier == "protokol_leukemia", ["TEST1", "TEST"] contains dataSet["text_1"].value, dataSet["date_1"].value != null, DateUtils.objectToLocalDate(dataSet["date_1"].value).compareTo(LocalDate.now()) == 0) // TODO figure out casting
    $dataSet: HashMap() from $case.dataSet
then
    log.info("New case [" + $case.getTitle() +"] created");
    log.info($dataSet.toString());
    log.info($case.getStringId());
end

rule "rule event trigger rule"
when
    $event: RuleEvaluation()
then
    log.info("New rule event fact inserted " + $event.getCaseId());
end

rule "rule event insert"
when
    $event: RuleEvaluation()
then
    insert(new AtomicInteger(1))
end

