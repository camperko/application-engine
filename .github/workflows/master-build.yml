name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build
        run: mvn clean package install -DskipTests=true

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:4.4
        ports:
          - 27017/tcp
      redis:
        image: redis
        ports:
          - 6379/tcp
      elasticsearch:
        image: elasticsearch:7.10.2
        ports:
          - 9200/tcp
        options: -e="discovery.type=single-node;http.host=0.0.0.0;cluster.name=elasticsearch;transport.host=0.0.0.0" --health-cmd="curl http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=5s --health-retries=10
    steps:
      - name: Test Database
        env:
          ELASTIC_SEARCH_URL: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        run: |
          echo $ELASTIC_SEARCH_URL
          curl -fsSL "$ELASTIC_SEARCH_URL/_cat/health?h=status"

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build
        run: mvn clean package install -DskipTests=true

      - name: Run tests
        #        env:
        #          MONGO_URI: ${{ job.services.mongo.ports[27017] }}
        #          REDIS_PORT: ${{ job.services.redis.ports[6379] }}
        #          ELASTIC_SEARCH_URL: http://localhost:${{ job.services.elasticsearch.ports[9200] }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=netgrif_application-engine

      publish:
        runs-on: ubuntu-latest
        permissions:
          contents: read
          packages: write
        steps:
          - uses: actions/checkout@v2

          - id: install-secret-key
            name: Install gpg secret key
            run: |
              cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
              gpg --list-secret-keys --keyid-format LONG

          - name: Set up Maven Central Repository
            uses: actions/setup-java@v2
            with:
              java-version: 11
              distribution: 'adopt'
              server-id: ossrh
              server-username: MAVEN_USERNAME
              server-password: MAVEN_PASSWORD

          - name: Publish package
            run: mvn --batch-mode   -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }}  deploy
            env:
              MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
              MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
